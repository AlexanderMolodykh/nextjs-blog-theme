---
title: Explore GraphQL using introspection queries
description: "Sometimes you need quickly check GraphQL contract and no other tools available. Sometimes you build a script that automatically grabs available resources. Here is the set of useful GraphQL introspection quieries."
date: Jul 25 2022
---
<p>GraphQL services support introspection queries. Unfortunatelly, on production environments introspections usually blocked for sequrity reasons. But I found Deuche Bahn one if you don't have your own to play with https://bahnql.herokuapp.com/graphql</p>
<p><a href="/explore_service.json">Insomnia template for below examples</a></p>
<h2>Check the list of possible queries and mutations.</h2>
<p>
<pre><code>
{
  __schema {
    queryType {
      name
      fields{
        name
      }
    }

    mutationType{
      name
      fields{
        name
      }
    }
  }
}
</code></pre>
</p>
<p>Or simplified version where common code moved into fragment.</p>
<p>
<pre><code>
{
  __schema {
    queryType {
      ...TypeFields
    }

    mutationType {                                           
      ...TypeFields
    }
  }
}

fragment TypeFields on __Type
{
  name
  fields {
    name
  }   
}
</code></pre>
</p>

<p>For Deuche Bahn service I got response below. I would not present all the responses - you can download insomnia app and try by yourself.</p>
<p>
<pre><code>
{
	"data": {
		"__schema": {
			"queryType": {
				"name": "Query",
				"fields": [
					{
						"name": "routing"
					},
					{
						"name": "stationWithEvaId"
					},
					{
						"name": "stationWithStationNumber"
					},
					{
						"name": "stationWithRill100"
					},
					{
						"name": "search"
					},
					{
						"name": "nearby"
					},
					{
						"name": "parkingSpace"
					}
				]
			},
			"mutationType": null
		}
	}
}
</code></pre>
</p>

<p>There are some queries but no mutations.</p>
<p>Keep in mind, some nasty services would throw error for such query (when there are no mutations). Then just remove `mutationType` piece.</p>
<p>Good services have also documentation. Just add description field into previous fragment.</p>
<pre><code>
fragment TypeFields on __Type
{
  name
  fields {
    name
    description
  }   
}
</code></pre>
</p>
<p>Keep in mind, depreacted functions are not shown by default. But we can access them and check the reason it is deprecated.</p>
<pre><code>
fragment TypeFields on __Type
{
  name
  fields {
    name
    isDeprecated
    deprecationReason
  }   
}
</code></pre>
</p>

<h2>Check the list of possible input parameters.</h2>
<p>
<pre><code>
{
  __schema {
    queryType {
      ...TypeFields
    }

    mutationType {                                           
      ...TypeFields
    }
  }
}

fragment TypeFields on __Type
{
  name
  fields {
    name
    args {
      name
      type {
        name
      }
    defaultValue
    }
  }
}
</code></pre>
</p>

<h2>Check the list of possible output parameters.</h2>
<p>
<pre><code>
{
  __schema {
    queryType {
      ...TypeFields
    }

    mutationType {                                           
      ...TypeFields
    }
  }
}

fragment TypeFields on __Type
{
  name
  fields {
    name
    type {
      ofType {
        name
      }
    }
  }   
}
</code></pre>
</p>

<h2>Check complex types.</h2>
<p>Finally, explore the types. The argument is not always a simple string on number. It often complex data structures.</p>
<p>
<pre><code>
{
  __schema {
    queryType {
      ...TypeFields
    }

    mutationType {                                           
      ...TypeFields
    }
  }
}

fragment TypeFields on __Type
{
  name
  fields {
    name
    type {
      ofType {
        name
      }
    }
  }   
}
</code></pre>
</p>
<p>It is just overview of basic GraphQL usage. In reality you can have complex classes with inheritance, unions, enums.</p>